name: Run Axies pipeline with cron
on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

env:
  GCP__PROJECT_ID: axies-ronin-pipeline
  GCP__CLIENT_EMAIL: loader@axies-ronin-pipeline.iam.gserviceaccount.com
  GCP__PRIVATE_KEY: ${{ secrets.GCP__PRIVATE_KEY }}
  DEFAULT_DATASET: axies_github_1

jobs:
  maybe_skip:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v4
        with:
          concurrent_skipping: 'always'
          skip_after_successful_duplicate: 'false'
          do_not_skip: '[]'

  get_axie_data:
    needs: maybe_skip
    if: ${{ needs.maybe_skip.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Check out 
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.10.x"

      - uses: syphar/restore-virtualenv@v1
        id: cache-virtualenv
        with:
          requirement_files: requirements.txt  # this is optional

      - uses: syphar/restore-pip-download-cache@v1
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'

      - run: pip install -r requirements.txt
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'

      # - name: Load cached venv
      #   id: cached-dependencies
      #   uses: actions/cache@v2
      #   with:
      #     path: .venv
      #     key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-axies
      
      # - name: Install dependencies
      #   run: pip install -r requirements.txt

      - name: Restoring pipeline state
        uses: jorgebg/stateful-action@v0.3
        with:
          branch: pipeline
          backup: 2

      - name: Run Axies Pipeline
        run: python axies.py && python axies_load.py
